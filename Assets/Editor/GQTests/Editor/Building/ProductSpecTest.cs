using NUnit.Framework;
using GQ.Editor.Building;
using System.IO;
using UnityEngine;
using GQ.Client.Util;
using System;
using GQ.Client.Conf;
using GQ.Editor.Util;

namespace GQTests.Editor.Building {

	public class ProductSpecTest {

		protected string PRODUCTS_TEST_DIR = GQAssert.TEST_DATA_BASE_DIR + "TestProducts/";


		/// <summary>
		/// The product template is a directory that contains all branding files for a new product like logo, splashscreen etc.
		/// However, it does not contain a config file, which is generated by the ProductManager when creating new products.
		/// </summary>
		[Test]
		public void ProductSpecTemplate () {
			// Assert:

			// Product Template Folder:
			Assert.That(
				Directory.Exists(ProductManager.TEMPLATE_PRODUCT_PATH),
				"Directory for Product Default Template should be at " + ProductManager.TEMPLATE_PRODUCT_PATH);

			// Graphic files:
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, ProductSpec.APP_ICON)));
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, ProductSpec.SPLASH_SCREEN)));
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, ProductSpec.TOP_LOGO)));
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, ProductSpec.ANDROID_MANIFEST)));
		
			// TODO Loading Animation
		}


		[Test]
		public void ValidProductSpec () {
			// Arrange:
			string validProductSpecPath = Files.CombinePath(PRODUCTS_TEST_DIR, "ValidityOfProducts", "validProduct");

			// Act:
			ProductSpec product = new ProductSpec(validProductSpecPath);

			// Assert:
			Assert.That(
				product.IsValid(), 
				"Product invalid (" + product.Errors.Count + " errors):\n" + product.AllErrorsAsString()
			);
		}

		[Test]
		public void InvalidProductNoProductJSON () {
			// Arrange:
			string productDir = Files.CombinePath(PRODUCTS_TEST_DIR, "ValidityOfProducts", "productWithMissingProductJSON");

			// Act & Assert:
			try {
				new ProductSpec(productDir);
			} catch ( ArgumentException exc ) {
				Assert.That(
					exc.Message.StartsWith("Invalid product definition. Config file could not be read."), 
					"Wrong excepotion catched?.");
				return; // do not fail
			}
			Assert.Fail("ArgumentException should have been thrown.");
		}

		[Test]
		public void InvalidProductNoAppIcon () {
			// Arrange:
			string productSpecPath = Files.CombinePath(PRODUCTS_TEST_DIR, "ValidityOfProducts", "productWithMissingAppIcon");

			// Act:
			ProductSpec product = new ProductSpec(productSpecPath);

			// Assert:
			Assert.That(!product.IsValid());
			GQError manifestError = product.Errors.Find(AppIconFileMissingError);
			Assert.That(manifestError != null, 
				"Should be needplash screen file shoul be needed. Error missing that complains about it.");
		}

		[Test]
		public void AndroidManifestNeededInProductSpec () {
			// Arrange:
			string productSpecPath = Files.CombinePath(PRODUCTS_TEST_DIR, "ValidityOfProducts", "productMissingManifest");

			// Act:
			ProductSpec product = new ProductSpec(productSpecPath);

			// Assert:
			Assert.That(!product.IsValid());
			GQError manifestError = product.Errors.Find(FindManifestMissingError);
			Assert.That(manifestError != null, 
				"Should be needplash screen file shoul be needed. Error missing that complains about it.");
		}

		private bool FindManifestMissingError (GQError err) {
			return err.Text.StartsWith("No AndroidManifest.xml file found.");
		}

		private bool AppIconFileMissingError (GQError err) {
			return err.Text.Equals("No AppIcon.png file found.");
		}

		private bool ProductJSONFileMissingError (GQError err) {
			return err.Text.Equals("No Product.json file found.");
		}

		[Test]
		public void InvalidProductNoSplashScreen () {
			// Arrange:
			string productSpecPath = Files.CombinePath(PRODUCTS_TEST_DIR, "ValidityOfProducts", "productWithMissingSplashScreen");

			// Act:
			ProductSpec product = new ProductSpec(productSpecPath);

			// Assert:
			Assert.That(!product.IsValid());
			GQError manifestError = product.Errors.Find(SplashScreenFileMissingError);
			Assert.That(manifestError != null, 
				"Should be needplash screen file shoul be needed. Error missing that complains about it.");
		}

		private bool SplashScreenFileMissingError (GQError err) {
			return err.Text.Equals("No SplashScreen.jpg file found.");
		}

		[Test]
		public void InvalidProductNoTopLogo () {
			// Arrange:
			string productSpecPath = Files.CombinePath(PRODUCTS_TEST_DIR, "ValidityOfProducts", "productWithMissingTopLogo");

			// Act:
			ProductSpec product = new ProductSpec(productSpecPath);

			// Assert:
			Assert.That(!product.IsValid());
			GQError manifestError = product.Errors.Find(TopLogoFileMissingError);
			Assert.That(manifestError != null, 
				"Should be needplash screen file shoul be needed. Error missing that complains about it.");
		}

		private bool TopLogoFileMissingError (GQError err) {
			return err.Text.Equals("No TopLogo.jpg file found.");
		}
	}

}

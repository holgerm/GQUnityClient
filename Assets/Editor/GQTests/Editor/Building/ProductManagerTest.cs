using NUnit.Framework;
using GQ.Editor.Building;
using System.IO;
using UnityEngine;
using GQ.Util;
using System;
using GQ.Client.Conf;
using GQ.Editor.Util;

namespace GQTests.Editor.Building {

	public class ProductManagerTest {

		protected string PRODUCTS_TEST_DIR = GQAssert.TEST_DATA_BASE_DIR + "TestProducts/";

		[SetUp, TearDown]
		public void deleteProductManager () {
			ProductManager._dispose();
		}

		[Test]
		public void InitStandardPM () {
			// Arrange:

			// Act:
			ProductManager pm = ProductManager.Instance;

			// Assert:
			Assert.AreEqual(ProductManager.PRODUCTS_DIR_PATH_DEFAULT, ProductManager.ProductsDirPath);
			Assert.AreEqual(0, pm.Errors.Count, pm.Errors.Count > 0 ? "Unexpected errors. The first is: " + pm.Errors[0].ToString() : "No errors as expected.");
		}

		[Test]
		public void InitTestPM () {
			// Arrange:
			ProductManager testPM = null;

			// Act:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR;
			testPM = ProductManager.Instance;

			// Assert:
			Assert.IsNotNull(testPM);
			Assert.AreEqual(PRODUCTS_TEST_DIR, ProductManager.ProductsDirPath);
			Assert.AreEqual(0, testPM.AllProducts.Count);
		}

		/// <summary>
		/// The product template is a directory that contains all branding files for a new product like logo, splashscreen etc.
		/// However, it does not contain a config file, which is generated by the ProductManager when creating new products.
		/// </summary>
		[Test]
		public void ProductTemplate () {
			// Assert:

			// Product Template Folder:
			Assert.That(
				Directory.Exists(ProductManager.TEMPLATE_PRODUCT_PATH),
				"Directory for Product Default Template should be at " + ProductManager.TEMPLATE_PRODUCT_PATH);

			// Graphic files:
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, ProductSpec.APP_ICON)));
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, ProductSpec.SPLASH_SCREEN)));
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, ProductSpec.TOP_LOGO)));
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, ProductSpec.ANDROID_MANIFEST)));
		
			// TODO Loading Animation
		}

		[Test]
		public void CreateNewProduct () {
			// Arrange:
			string testDir = Files.CombinePath(PRODUCTS_TEST_DIR, "NewProducts");
			if ( !Directory.Exists(testDir) )
				Assets.CreateSubfolder(PRODUCTS_TEST_DIR, "NewProducts");
			Assets.ClearAssetFolder(testDir);

			ProductManager.ProductsDirPath = testDir;
			ProductManager testPM = ProductManager.Instance;
			string testProductID = "testProduct";

//			Assets.ClearAssetFolder(testPM.BuildExportPath);

			// Act:
			testPM.createNewProduct(testProductID);

			///////////////////////////////////
			// Assert:
			Assert.AreEqual(1, testPM.AllProducts.Count);
			ProductSpec product = testPM.getProduct(testProductID);
			Assert.AreEqual(testProductID, product.Id);
			Assert.That(Directory.Exists(product.Dir), "Product dir should be ok for product " + product);

			// Branding files:
			Assert.That(File.Exists(product.AppIconPath), "App icon file should exist at " + product.AppIconPath);
			Assert.That(File.Exists(product.SplashScreenPath), "Splashscreen file should exist at " + product.SplashScreenPath);
			Assert.That(File.Exists(product.TopLogoPath), "Top logo file should exist at " + product.TopLogoPath);
			Assert.That(
				product.IsValid(), 
				"Newly created product " + product.Id + " is not valid (" +
				product.Errors.Count + " errors):\n" + product.AllErrorsAsString()
			);

			// TODO Animation for loading logo

			// Config file:
			Assert.That(File.Exists(product.ConfigPath), "Config file should exist at " + product.ConfigPath);
			Assert.AreEqual(testProductID, product.Id);
			Assert.AreEqual(testProductID, product.Config.id);

			// Clean:
			Assets.ClearAssetFolder(testDir);
		}

		[Test]
		public void EmptyProductList () {
			// Act:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ProductListEmpty";
			ProductManager testPM = ProductManager.Instance;

			// Assert:
			Assert.AreEqual(0, testPM.AllProducts.Count, "Product List should be empty.");
		}

		[Test]
		public void PopulatedProductList () {
			// Act:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ProductListPopulated";
			ProductManager testPM = ProductManager.Instance;

			// Assert:
			Assert.AreEqual(4, testPM.AllProducts.Count, "Product List should contain the 4 valid products.");
			Assert.That(testPM.AllProductIds.Contains("product1"), "product1 missing");
			Assert.That(testPM.AllProductIds.Contains("product2"), "product2 missing");
			Assert.That(testPM.AllProductIds.Contains("product3"), "product3 missing");
			Assert.That(testPM.AllProductIds.Contains("product4"), "product4 missing");
			Assert.AreEqual(0, testPM.Errors.Count);
		}

		[Test]
		public void SetProductForBuild () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ProductListPopulated";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			if ( Directory.Exists(testPM.BuildExportPath) )
				Assets.ClearAssetFolder(testPM.BuildExportPath);
			

			// Act:
			testPM.SetProductForBuild("product1");

			// Assert:
			ProductSpec buildProduct = new ProductSpec(testPM.BuildExportPath);
			Assert.That(
				buildProduct.IsValid(), 
				"Product invalid (" + buildProduct.Errors.Count + " errors):\n" + buildProduct.AllErrorsAsString()
			);
			Assert.AreEqual("product1", buildProduct.Id);

			// check watermark of android manifest (in plugins/android folder):
			string idFoundInManifest = ProductManager.Extract_ID_FromXML_Watermark(ProductManager.ANDROID_MANIFEST_PATH);
			Assert.AreEqual("product1", idFoundInManifest);



			// Act:
			testPM.SetProductForBuild("product3");

			// Assert:
			buildProduct = new ProductSpec(testPM.BuildExportPath);
			Assert.That(
				buildProduct.IsValid(), 
				"Product invalid (" + buildProduct.Errors.Count + " errors):\n" + buildProduct.AllErrorsAsString()
			);
			Assert.AreEqual("product3", buildProduct.Id);

			// check watermark of android manifest (in plugins/android folder):
			idFoundInManifest = ProductManager.Extract_ID_FromXML_Watermark(ProductManager.ANDROID_MANIFEST_PATH);
			Assert.AreEqual("product3", idFoundInManifest);

			// Clean:
			Assets.ClearAssetFolder(testPM.BuildExportPath);
		}

		[Test]
		public void SetProductWithMarkers () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ProductsWithSubdirsTest";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Assets.ClearAssetFolder(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("productWithMarkers");
			ProductSpec buildProduct = new ProductSpec(testPM.BuildExportPath);

			// Assert:
			Assert.AreEqual("productWithMarkers", buildProduct.Id);
			Assert.That(Directory.Exists(Files.CombinePath(buildProduct.Dir, "markers")), "markers directory missing in product dir: " + buildProduct.Dir);
			Assert.That(File.Exists(Files.CombinePath(buildProduct.Dir, "markers", "marker1.png")), "marker1.png missing in product");
			Assert.That(File.Exists(Files.CombinePath(buildProduct.Dir, "markers", "marker2.png")), "marker2.png missing in product");

			// Act:
			testPM.SetProductForBuild("productWithoutMarkers");

			// Assert:
			buildProduct = new ProductSpec(testPM.BuildExportPath);
			Assert.AreEqual("productWithoutMarkers", buildProduct.Id);
			Assert.That(!Directory.Exists(Files.CombinePath(buildProduct.Dir, "markers")), "marker directory should not exist with this product set for build");

			// Clean:
			Assets.ClearAssetFolder(testPM.BuildExportPath);
		}

		[Test]
		public void SetProductWithIgnoredSubdirs () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ProductsWithSubdirsTest";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Assets.ClearAssetFolder(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("productWithIgnoredSubdirs");
			ProductSpec buildProduct = new ProductSpec(testPM.BuildExportPath);

			// Assert:
			Assert.AreEqual("productWithIgnoredSubdirs", buildProduct.Id);
			Assert.That(!Directory.Exists(Files.CombinePath(buildProduct.Dir, "_images")), "Directory _images should not be included in build.");
			Assert.That(!Directory.Exists(Files.CombinePath(buildProduct.Dir, "_texts")), "Directory _images should not be included in build.");
			Assert.That(Directory.Exists(Files.CombinePath(buildProduct.Dir, "images")), "Directory images should be included in build.");
			Assert.That(File.Exists(Files.CombinePath(buildProduct.Dir, "images", "IncludedImage.png")), "File images/IncludedImage.png should be included in build.");
			Assert.That(Directory.Exists(Files.CombinePath(buildProduct.Dir, "texts")), "Directory images should be included in build.");
			Assert.That(File.Exists(Files.CombinePath(buildProduct.Dir, "texts", "IncludedTextDoc.txt")), "File texts/IncludedTextDoc.txt should be included in build.");

			// Clean:
			Assets.ClearAssetFolder(testPM.BuildExportPath);
		}

		[Test]
		public void ValidProduct () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ValidityOfProducts";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Assets.ClearAssetFolder(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("validProduct");
			ProductSpec buildProduct = new ProductSpec(testPM.BuildExportPath);

			// Assert:
			Assert.That(
				buildProduct.IsValid(), 
				"Product invalid (" + buildProduct.Errors.Count + " errors):\n" + buildProduct.AllErrorsAsString()
			);

			// Clean:
			Assets.ClearAssetFolder(testPM.BuildExportPath);
		}

		[Test]
		public void InvalidProductNoProductJSON () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ValidityOfProducts";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Assets.ClearAssetFolder(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("productWithMissingProductJSON");

			// Assert:
			try {
				new ProductSpec(testPM.BuildExportPath);
			} catch ( Exception e ) {
				Assert.That(e.GetType().Name.Equals("ArgumentException"));
				Assert.That(e.Message.Equals("Invalid product definition. Config file could not be read."));

				Assets.ClearAssetFolder(testPM.BuildExportPath);

				return;
			}

			Assert.Fail("Reading invalid product without Product.JSON should have caused an ArgumentException to be thrown.");

			// Clean:
			Assets.ClearAssetFolder(testPM.BuildExportPath);
		}

		[Test]
		public void InvalidProductNoAppIcon () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ValidityOfProducts";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Assets.ClearAssetFolder(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("productWithMissingAppIcon");
			ProductSpec buildProduct = new ProductSpec(testPM.BuildExportPath);

			// Assert:
			Assert.That(!buildProduct.IsValid());

			// Clean:
			Assets.ClearAssetFolder(testPM.BuildExportPath);
		}

		[Test]
		public void InvalidProductNoAndroidManifest () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ValidityOfProducts";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Assets.ClearAssetFolder(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("productMissingManifest");
			ProductSpec buildProduct = new ProductSpec(testPM.BuildExportPath);

			// Assert:
			Assert.That(!buildProduct.IsValid());

			// Clean:
			Assets.ClearAssetFolder(testPM.BuildExportPath);
		}

		[Test]
		public void InvalidProductNoSplashScreen () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ValidityOfProducts";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Assets.ClearAssetFolder(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("productWithMissingSplashScreen");
			ProductSpec buildProduct = new ProductSpec(testPM.BuildExportPath);

			// Assert:
			Assert.That(!buildProduct.IsValid());

			// Clean:
			Assets.ClearAssetFolder(testPM.BuildExportPath);
		}

		[Test]
		public void InvalidProductNoTopLogo () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ValidityOfProducts";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Assets.ClearAssetFolder(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("productWithMissingTopLogo");
			ProductSpec buildProduct = new ProductSpec(testPM.BuildExportPath);

			// Assert:
			Assert.That(!buildProduct.IsValid());

			// Clean:
			Assets.ClearAssetFolder(testPM.BuildExportPath);
		}
	}

}

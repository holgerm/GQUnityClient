using NUnit.Framework;
using GQ.Editor.Building;
using System.IO;
using UnityEngine;
using GQ.Util;
using System;
using GQ.Client.Conf;

namespace GQTests.Editor.Building {

	public class ProductManagerTest {

		protected string PRODUCTS_TEST_DIR = GQAssert.TEST_DATA_BASE_DIR + "TestProducts/";

		[TearDown]
		public void deleteProductManager () {
			ProductManager._dispose();
		}

		[Test]
		public void InitStandardPM () {
			// Arrange:

			// Act:
			ProductManager pm = ProductManager.Instance;

			// Assert:
			Assert.AreEqual(ProductManager.PRODUCTS_DIR_PATH_DEFAULT, ProductManager.ProductsDirPath);
			Assert.AreEqual(0, pm.Errors.Count, pm.Errors.Count > 0 ? "Unexpected errors. The first is: " + pm.Errors[0].ToString() : "No errors as expected.");
		}

		[Test]
		public void InitTestPM () {
			// Arrange:
			ProductManager testPM = null;

			// Act:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR;
			testPM = ProductManager.Instance;

			// Assert:
			Assert.IsNotNull(testPM);
			Assert.AreEqual(PRODUCTS_TEST_DIR, ProductManager.ProductsDirPath);
			Assert.AreEqual(0, testPM.AllProducts.Count);
		}

		/// <summary>
		/// The product template is a directory that contains all branding files for a new product like logo, splashscreen etc.
		/// However, it does not contain a config file, which is generated by the ProductManager when creating new products.
		/// </summary>
		[Test]
		public void ProductTemplate () {
			// Assert:

			// Product Template Folder:
			Assert.That(
				Directory.Exists(ProductManager.TEMPLATE_PRODUCT_PATH),
				"Directory for Product Default Template should be at " + ProductManager.TEMPLATE_PRODUCT_PATH);

			// Graphic files:
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, Product.APP_ICON_PATH)));
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, Product.SPLASH_SCREEN_PATH)));
			Assert.That(File.Exists(Files.CombinePath(ProductManager.TEMPLATE_PRODUCT_PATH, Product.TOP_LOGO_PATH)));
		
			// TODO Loading Animation
		}

		[Test]
		public void CreateNewProduct () {
			// Arrange:
			string testDir = PRODUCTS_TEST_DIR + "NewProducts";
			if ( !Directory.Exists(testDir) )
				Directory.CreateDirectory(testDir);

			Files.ClearDirectory(testDir);

			ProductManager.ProductsDirPath = testDir;
			ProductManager testPM = ProductManager.Instance;

			string testProductID = "testProduct";

			// Act:
			testPM.createNewProduct(testProductID);

			///////////////////////////////////
			// Assert:
			Assert.AreEqual(1, testPM.AllProducts.Count);
			Product product = testPM.getProduct(testProductID);
			Assert.AreEqual(testProductID, product.Id);
			Assert.That(Directory.Exists(product.Dir), "Product dir should be ok for product " + product);

			// Branding files:
			Assert.That(File.Exists(product.AppIconPath), "App icon file should exist at " + product.AppIconPath);
			Assert.That(File.Exists(product.SplashScreenPath), "Splashscreen file should exist at " + product.SplashScreenPath);
			Assert.That(File.Exists(product.TopLogoPath), "Top logo file should exist at " + product.TopLogoPath);

			// TODO Animation for loading logo

			// Config file:
			Assert.That(File.Exists(product.ConfigPath), "Config file should exist at " + product.ConfigPath);
			Assert.AreEqual(testProductID, product.Id);
			Assert.AreEqual(testProductID, product.Config.id);

			// Clean:
			Files.ClearDirectory(testDir);
		}

		[Test]
		public void EmptyProductList () {
			// Act:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ProductListEmpty";
			ProductManager testPM = ProductManager.Instance;

			// Assert:
			Assert.AreEqual(0, testPM.AllProducts.Count, "Product List should be empty.");
		}

		[Test]
		public void PopulatedProductList () {
			// Act:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ProductListPopulated";
			ProductManager testPM = ProductManager.Instance;

			// Assert:
			Assert.AreEqual(4, testPM.AllProducts.Count, "Product List should contain the 4 valid products.");
			Assert.That(testPM.AllProductIds.Contains("product1"), "product1 missing");
			Assert.That(testPM.AllProductIds.Contains("product2"), "product2 missing");
			Assert.That(testPM.AllProductIds.Contains("product3"), "product3 missing");
			Assert.That(testPM.AllProductIds.Contains("product4"), "product4 missing");
			Assert.AreEqual(0, testPM.Errors.Count);
		}

		[Test]
		public void SetProductForBuild () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "ProductListPopulated";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Files.ClearDirectory(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("product1");

			// Assert:
			Product buildProduct = new Product(testPM.BuildExportPath);
			Assert.That(File.Exists(buildProduct.AppIconPath), "App icon file should exist at " + buildProduct.AppIconPath);
			Assert.That(File.Exists(buildProduct.SplashScreenPath), "Splashscreen file should exist at " + buildProduct.SplashScreenPath);
			Assert.That(File.Exists(buildProduct.TopLogoPath), "Top logo file should exist at " + buildProduct.TopLogoPath);
			Assert.That(File.Exists(buildProduct.ConfigPath), "Config file should exist at " + buildProduct.ConfigPath);
			Assert.AreEqual("product1", buildProduct.Id);

			// Act:
			testPM.SetProductForBuild("product3");

			// Assert:
			buildProduct = new Product(testPM.BuildExportPath);
			Assert.That(File.Exists(buildProduct.AppIconPath), "App icon file should exist at " + buildProduct.AppIconPath);
			Assert.That(File.Exists(buildProduct.SplashScreenPath), "Splashscreen file should exist at " + buildProduct.SplashScreenPath);
			Assert.That(File.Exists(buildProduct.TopLogoPath), "Top logo file should exist at " + buildProduct.TopLogoPath);
			Assert.That(File.Exists(buildProduct.ConfigPath), "Config file should exist at " + buildProduct.ConfigPath);
			Assert.AreEqual("product3", buildProduct.Id);
		}

		[Test]
		public void SetProductWithMarkers () {
			// Arrange:
			ProductManager.ProductsDirPath = PRODUCTS_TEST_DIR + "Products4MarkerTest";
			ProductManager testPM = ProductManager.Instance;
			testPM.BuildExportPath = Files.CombinePath(GQAssert.TEST_DATA_BASE_DIR, "TestBuildExport");
			Files.ClearDirectory(testPM.BuildExportPath);

			// Act:
			testPM.SetProductForBuild("productWithMarkers");

			// Assert:
			Product buildProduct = new Product(testPM.BuildExportPath);
			Assert.AreEqual("productWithMarkers", buildProduct.Id);
			Assert.That(Directory.Exists(Files.CombinePath(buildProduct.Dir, "markers")), "marker directory missing in product");
			Assert.That(File.Exists(Files.CombinePath(buildProduct.Dir, "markers", "marker1.png")), "marker1.png missing in product");
			Assert.That(File.Exists(Files.CombinePath(buildProduct.Dir, "markers", "marker2.png")), "marker2.png missing in product");

			// Act:
			testPM.SetProductForBuild("productWithoutMarkers");

			// Assert:
			buildProduct = new Product(testPM.BuildExportPath);
			Assert.AreEqual("productWithoutMarkers", buildProduct.Id);
			Assert.That(!Directory.Exists(Files.CombinePath(buildProduct.Dir, "markers")), "marker directory should not exist with this product set for build");
		}
	}

}
